% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAGA_functions.R
\name{PAGA}
\alias{PAGA}
\title{PAGA}
\usage{
PAGA(
  object,
  assay = "RNA",
  slim = FALSE,
  seurat_grouping = "seurat_clusters",
  set_ident = FALSE,
  clustering_algorithm = "leiden",
  reduction_name = "umap",
  reduction_key = "umap_",
  edge_filter_weight = 0.1,
  neighbors_n_neighbors = 15,
  neighbors_n_pcs = NULL,
  neighbors_use_rep = "pca",
  neighbors_knn = TRUE,
  neighbors_random_state = 0,
  neighbors_method = "umap",
  neighbors_metric = "euclidean",
  clustering_resolution = 1,
  clustering_restrict_to = NULL,
  clustering_random_state = 0,
  clustering_key_added = NULL,
  clustering_adjacency = NULL,
  clustering_directed = TRUE,
  clustering_use_weights = TRUE,
  clustering_n_iterations = -1,
  clustering_partition_type = NULL,
  paga_show = FALSE,
  paga_plot = FALSE,
  paga_add_pos = TRUE,
  paga_threshold = 0.01,
  paga_layout = NULL,
  paga_init_pos = NULL,
  paga_root = 0,
  paga_single_component = NULL,
  paga_random_state = 0,
  umap_min_dist = 0.5,
  umap_spread = 1,
  umap_n_components = 3,
  umap_alpha = 1,
  umap_gamma = 1,
  umap_negative_sample_rate = 5,
  umap_init_pos = "spectral",
  dpt_root_cell = NULL,
  dpt_root_cluster = NULL,
  dpt_auto_root = "min",
  dpt_auto_reduction = "dm"
)
}
\arguments{
\item{assay}{Seurat object assay to use when converting to Scanpy object}

\item{slim}{Temporarily discard all unnecessary data from the Seurat object (i.e. keep only the normalized data for the assay and reduction used for neighborhood calculation).  May help when performing PAGA on large objects. (Default: FALSE)}

\item{seurat_grouping}{Force PAGA to use this metadata grouping variable. (Default: NULL)}

\item{set_ident}{Set the cluster identity for each cell when returning the object? (Default: TRUE)}

\item{clustering_algorithm}{Whether to use the "louvain" or "leiden" algorithms (Default: "leiden")}

\item{reduction_name}{dimensional reduction name, `umap` by default}

\item{reduction_key}{dimensional reduction key, specifies the string before the number for the dimension names. `umap` by default}

\item{edge_filter_weight}{Set edges with a weight below this threshold to NA (Default: 0.1)}

\item{clustering_resolution}{Resolution to pass to the clustering algorith (Default: 1.0)}

\item{dpt_root_cell}{Index of root cell. If unspecified, defaults to dpt_auto methods.}

\item{dpt_root_cluster}{ID of cluster used to identify root cell. If unspecified, defaults to dpt_auto methods.}

\item{dpt_auto_root}{Method used to auto detect route. one of 'min' or 'max'. Finds correspodning index from specified reduction.}

\item{dpt_auto_reduction}{Dimensional reduction used to identify root cell (using min or max method). Default is diffusion map 'dm'}
}
\value{

}
\description{
Use scanpy.tl.paga() to produce a partition-based graph abstraction for a Seurat
object and use that to initialize a UMAP.  Additionally, runs cluster determination via the
'leiden' or 'louvain' algorithms.

If dimensional reduction has already been performed (PCA, ICA, or harmony), that is used to
find neighbors, otherwise PCA is run.

Parameters are prefixed by the step to which they correspond (i.e. "neighbors_" are
passed to scanpy.pp.neighbors())

Heavily based on the fantastic walk through found at https://romanhaa.github.io/blog/paga_to_r/
}
\examples{

library(sceasy)
library(reticulate)

py.path <- py_config()
use_python(py.path[["python"]])
sc <- import("scanpy", convert = FALSE)

# run PAGA analysis
pr <- PAGA(so.query,assay = "RNA", seurat_grouping = NULL, edge_filter_weight = 0.1)

# get PAGA results
pr.list <- pr@misc[["paga"]]

# generate PAGA plots
paga.plot <- ggplot(pr.list[["position"]], aes(x, y)) +
  geom_segment(
   data = pr.list[["edges"]],
   aes(x = x1, y = y1, xend = x2, yend = y2),
   size = pr.list[["edges"]]$weight*3,
   colour = "black",
   show.legend = FALSE
 ) +
 geom_point(aes(color = group), size = 7, alpha = 1, show.legend = FALSE) +
 geom_text(aes(label = group), color = "black", fontface = "bold") +
 labs(x = "UMAP_1", y = "UMAP_2") +
 theme_bw() +
theme(
   axis.title = element_blank(),
   axis.text = element_blank(),
   axis.ticks = element_blank(),
   axis.line = element_blank(),
   panel.grid.major = element_blank(),
   panel.grid.minor = element_blank(),
   panel.border = element_blank()
 )


}
